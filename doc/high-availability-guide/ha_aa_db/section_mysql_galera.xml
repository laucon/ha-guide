<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="ha-aa-db-mysql-galera">
  <title>MySQL with Galera</title>
  <para>Rather than starting with a vanilla version of MySQL, and then adding
    Galera, you will want to install a version of MySQL patched for wsrep
    (Write Set REPlication) from <link xlink:href="https://launchpad.net/codership-mysql">https://launchpad.net/codership-mysql</link>.
    The wsrep API is suitable for configuring MySQL High Availability in
    OpenStack because it supports synchronous replication.</para>
  <para>Note that the installation requirements call for careful attention. Read
    the guide <link xlink:href="https://launchpadlibrarian.net/66669857/README-wsrep">https://launchpadlibrarian.net/66669857/README-wsrep</link>
    to ensure you follow all the required steps.</para>
  <para>And for any additional information about Galera, you can access this guide:
    <link xlink:href="http://galeracluster.com/documentation-webpages/gettingstarted.html">http://galeracluster.com/documentation-webpages/gettingstarted.html</link></para>
  <orderedlist numeration="arabic" inheritnum="ignore" continuation="restarts">
    <title>Installing Galera through a MySQL version patched for wsrep:</title>
    <listitem>
        <para>
Setup the repository for Ubuntu 14.04 "trusty" (most recent).
Install the software properties, the key, and the repository:
        </para>
        <screen><prompt>#</prompt> <userinput>apt-get install software-properties-common</userinput>
<prompt>#</prompt> <userinput>apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db</userinput>
<prompt>#</prompt> <userinput>add-apt-repository 'deb http://ams2.mirrors.digitalocean.com/mariadb/repo/5.5/ubuntu trusty main'</userinput></screen>

   <note>
     <para>
You can change the mirror to one near you on:
      <link xlink:href="https://downloads.mariadb.org/mariadb/repositories/">downloads.mariadb.org</link>
     </para>
   </note>
   </listitem>
   <listitem>
        <para>
Update your system and install the required packages:
<screen><prompt>#</prompt> <userinput>apt-get update</userinput>
<prompt>#</prompt> <userinput>apt-get install mariadb-galera-server galera</userinput></screen>
        </para>
      <warning>
        <para>
If you have mariaDB already installed you need to re-apply all the permissions from the installation guide. It will purge all privileges!
        </para>
      </warning>
    </listitem>
    <listitem>
    <para>Adjust the configuration:</para>
        <para>In the <filename>/etc/mysql/my.conf</filename> file, make the following changes:</para>
    <programlisting language="ini">query_cache_size=0
binlog_format=ROW
default_storage_engine=innodb
innodb_autoinc_lock_mode=2
innodb_doublewrite=1</programlisting>
    </listitem>
    <listitem>
        <para>
            Create the <filename>/etc/mysql/conf.d/wsrep.cnf</filename> file.
        </para>

        <para>Paste the following lines in this file:</para>
        <programlisting language="ini">[mysqld]
wsrep_provider=/usr/lib/galera/libgalera_smm.so
wsrep_cluster_name="Openstack"
wsrep_sst_auth=wsrep_sst:wspass
wsrep_cluster_address="gcomm://<replaceable>PRIMARY_NODE_IP</replaceable>,<replaceable>SECONDARY_NODE_IP</replaceable>"
wsrep_sst_method=rsync
wsrep_node_address="<replaceable>PRIMARY_NODE_IP</replaceable>"
wsrep_node_name="<replaceable>NODE_NAME</replaceable>"
        </programlisting>
        <para>
            Replace <replaceable>PRIMARY_NODE_IP</replaceable> and
            <replaceable>SECONDARY_NODE_IP</replaceable> with the IP addresses
            of your primary and secondary servers.
        </para>
        <para>
            Replace <replaceable>PRIMARY_NODE_IP</replaceable> with the hostname of the server. This is set for logging.
        </para>
        <para>Copy this file to all other databases servers and change the value of <literal>wsrep_cluster_address</literal> and <literal>wsrep_node_name</literal> accordingly.</para>
    </listitem>
    <listitem>
        <para>Start mysql as root and execute the following queries:</para>
        <screen><prompt>mysql&gt;</prompt> <userinput>SET wsrep_on=OFF; GRANT ALL ON *.* TO wsrep_sst@'%' IDENTIFIED BY 'wspass';</userinput></screen>
        <para>Remove user accounts with empty user names because they cause problems:</para>
        <screen><prompt>mysql&gt;</prompt> <userinput>SET wsrep_on=OFF; DELETE FROM mysql.user WHERE user='';</userinput></screen>
    </listitem>
    <listitem>
      <para>Check that the nodes can access each other through the firewall.
        Depending on your environment, this might mean adjusting iptables, as
        in:</para>
      <screen><prompt>#</prompt> <userinput>iptables --insert RH-Firewall-1-INPUT 1 --proto tcp \
  --source &lt;my IP&gt;/24 --destination &lt;my IP&gt;/32 --dport 3306 \
  -j ACCEPT</userinput>
<prompt>#</prompt> <userinput>iptables --insert RH-Firewall-1-INPUT 1 --proto tcp \
  --source &lt;my IP&gt;/24 --destination &lt;my IP&gt;/32 --dport 4567 \
  -j ACCEPT</userinput></screen>
      <para>This might also mean configuring any NAT firewall between nodes to
        allow direct connections. You might need to disable SELinux, or
        configure it to allow <systemitem class="service">mysqld</systemitem>
        to listen to sockets at unprivileged ports.</para>
    </listitem>
  </orderedlist>

  <para>
For the next step create a back-up file of the <filename>debian.cnf</filename> file in <filename>/etc/mysql</filename> on all database servers.
Should something go wrong just copy the back-up file back.
  </para>
    <screen><prompt>#</prompt> <userinput>cp debian.cnf debian.cnf.old</userinput></screen>
    <para>
    Make sure you have SSH root access on the other servers. From the primary database server, copy the <filename>debian.cnf</filename> file to all other servers by running the following command:
    </para>
    <screen><prompt>#</prompt> <userinput>scp /etc/mysql/debian.cnf root@IP-address:/etc/mysql</userinput></screen>
    <para>After the copy make sure that all files are the same, you can do this by using the following command:</para>
    <screen><prompt>#</prompt> <userinput>md5sum debian.cnf</userinput></screen>
  <para>From the <filename>debian.cnf</filename> get the database password:</para>
    <screen><prompt>#</prompt> <userinput>cat /etc/mysql/debian.cnf</userinput></screen>
  <para>The result will look like this:</para>
  <screen><computeroutput>[client]
host = localhost
user = debian-sys-maint
password = FiKiOY1Lw8Sq46If
socket = /var/run/mysqld/mysqld.sock
[mysql_upgrade]
host = localhost
user = debian-sys-maint
password = FiKiOY1Lw8Sq46If
socket = /var/run/mysqld/mysqld.sock
basedir = /usr
</computeroutput></screen>
<para>
The below query should be run on every server except the primary node. This will make sure that you can restart the database again.
Do not forget to add the password from the <filename>debian.cnf</filename>. To do this, run:
</para>
    <screen><prompt>mysql&gt;</prompt> <userinput>GRANT SHUTDOWN ON *.* TO ‘debian-sys-maint’@’localhost' IDENTIFIED BY '&lt;debian.cnf password&gt;';</userinput>
<prompt>mysql&gt;</prompt> <userinput>GRANT SELECT ON `mysql`.`user` TO ‘debian-sys-maint’@’localhost' IDENTIFIED BY '&lt;debian.cnf password&gt;';</userinput></screen>
    <para>Stop all the mysql servers and start the first server with the following command:</para>
    <screen><prompt>#</prompt> <userinput>service mysql start --wsrep-new-cluster</userinput></screen>
<para>All other nodes can now be started using:</para>
    <screen><prompt>#</prompt> <userinput>service mysql start</userinput></screen>
<para>Verify the wsrep replication by logging in as root under mysql and running the following command:</para>
<screen><prompt>mysql&gt;</prompt> <userinput>SHOW STATUS LIKE ‘wsrep%’;</userinput>
<computeroutput>+------------------------------+--------------------------------------+
| Variable_name                | Value                                |
+------------------------------+--------------------------------------+
| wsrep_local_state_uuid       | d6a51a3a-b378-11e4-924b-23b6ec126a13 |
| wsrep_protocol_version       | 5                                    |
| wsrep_last_committed         | 202                                  |
| wsrep_replicated             | 201                                  |
| wsrep_replicated_bytes       | 89579                                |
| wsrep_repl_keys              | 865                                  |
| wsrep_repl_keys_bytes        | 11543                                |
| wsrep_repl_data_bytes        | 65172                                |
| wsrep_repl_other_bytes       | 0                                    |
| wsrep_received               | 8                                    |
| wsrep_received_bytes         | 853                                  |
| wsrep_local_commits          | 201                                  |
| wsrep_local_cert_failures    | 0                                    |
| wsrep_local_replays          | 0                                    |
| wsrep_local_send_queue       | 0                                    |
| wsrep_local_send_queue_avg   | 0.000000                             |
| wsrep_local_recv_queue       | 0                                    |
| wsrep_local_recv_queue_avg   | 0.000000                             |
| wsrep_local_cached_downto    | 1                                    |
| wsrep_flow_control_paused_ns | 0                                    |
| wsrep_flow_control_paused    | 0.000000                             |
| wsrep_flow_control_sent      | 0                                    |
| wsrep_flow_control_recv      | 0                                    |
| wsrep_cert_deps_distance     | 1.029703                             |
| wsrep_apply_oooe             | 0.024752                             |
| wsrep_apply_oool             | 0.000000                             |
| wsrep_apply_window           | 1.024752                             |
| wsrep_commit_oooe            | 0.000000                             |
| wsrep_commit_oool            | 0.000000                             |
| wsrep_commit_window          | 1.000000                             |
| wsrep_local_state            | 4                                    |
| wsrep_local_state_comment    | Synced                               |
| wsrep_cert_index_size        | 18                                   |
| wsrep_causal_reads           | 0                                    |
| wsrep_cert_interval          | 0.024752                             |
| wsrep_incoming_addresses     | &lt;first IP&gt;:3306,&lt;second IP&gt;:3306     |
| wsrep_cluster_conf_id        | 2                                    |
| wsrep_cluster_size           | 2                                    |
| wsrep_cluster_state_uuid     | d6a51a3a-b378-11e4-924b-23b6ec126a13 |
| wsrep_cluster_status         | Primary                              |
| wsrep_connected              | ON                                   |
| wsrep_local_bf_aborts        | 0                                    |
| wsrep_local_index            | 1                                    |
| wsrep_provider_name          | Galera                               |
| wsrep_provider_vendor        | Codership Oy &lt;info@codership.com&gt;    |
| wsrep_provider_version       | 25.3.5-wheezy(rXXXX)                 |
| wsrep_ready                  | ON                                   |
| wsrep_thread_count           | 2                                    |
+------------------------------+--------------------------------------+</computeroutput></screen>
</section>
