<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="_set_up_corosync">
  <title>Set up Corosync</title>
  <para>Besides installing the <package>Corosync</package> package, you must
    also create a configuration file, stored in
    <filename>/etc/corosync/corosync.conf</filename>. Corosync can be configured
    to work with either multicast or unicast IP addresses.
  </para>
  <section xml:id="_set_up_corosync_multicast">
  <title>Set up Corosync with multicast</title>
  <para>Most distributions ship an example configuration file (<filename>corosync.conf.example</filename>)
    as part of the documentation bundled with the <package>Corosync</package>
    package. An example Corosync configuration file is shown below:</para>
  <formalpara>
    <title>Corosync configuration file (<filename>corosync.conf</filename>)</title>
    <para>
      <programlisting language="ini">totem {
        version: 2

        # Time (in ms) to wait for a token <co xml:id="CO1-1"/>
        token: 10000

        # How many token retransmits before forming a new
        # configuration
        token_retransmits_before_loss_const: 10

        # Turn off the virtual synchrony filter
        vsftype: none

        # Enable encryption <co xml:id="CO1-2"/>
        secauth: on

        # How many threads to use for encryption/decryption
        threads: 0

        # This specifies the redundant ring protocol, which may be
        # none, active, or passive. <co xml:id="CO1-3"/>
        rrp_mode: active

        # The following is a two-ring multicast configuration. <co xml:id="CO1-4"/>
        interface {
                ringnumber: 0
                bindnetaddr: 192.168.42.0
                mcastaddr: 239.255.42.1
                mcastport: 5405
        }
        interface {
                ringnumber: 1
                bindnetaddr: 10.0.42.0
                mcastaddr: 239.255.42.2
                mcastport: 5405
        }
}

amf {
        mode: disabled
}

service {
        # Load the Pacemaker Cluster Resource Manager <co xml:id="CO1-5"/>
        ver:       1
        name:      pacemaker
}

aisexec {
        user:   root
        group:  root
}

logging {
        fileline: off
        to_stderr: yes
        to_logfile: no
        to_syslog: yes
        syslog_facility: daemon
        debug: off
        timestamp: on
        logger_subsys {
                subsys: AMF
                debug: off
                tags: enter|leave|trace1|trace2|trace3|trace4|trace6
        }}</programlisting>
    </para>
  </formalpara>
  <calloutlist>
    <callout arearefs="CO1-1">
      <para>The <option>token</option> value specifies the time, in
        milliseconds, during which the Corosync token is expected to be
        transmitted around the ring. When this timeout expires, the token is
        declared lost, and after <option>token_retransmits_before_loss_const</option>
        lost tokens the non-responding processor (cluster node) is declared
        dead. In other words,
        <option>token</option> Ã— <option>token_retransmits_before_loss_const</option>
        is the maximum time a node is allowed to not respond to cluster
        messages before being considered dead. The default for
        <option>token</option> is 1000 (1 second), with 4 allowed
        retransmits. These defaults are intended to minimize failover times,
        but can cause frequent "false alarms" and unintended failovers in case
        of short network interruptions. The values used here are safer, albeit
        with slightly extended failover times.</para>
    </callout>
    <callout arearefs="CO1-2">
      <para>With <option>secauth</option> enabled, Corosync nodes mutually
        authenticate using a 128-byte shared secret stored in
        <filename>/etc/corosync/authkey</filename>, which may be generated with
        the <command>corosync-keygen</command> utility. When using
        <option>secauth</option>, cluster communications are also
        encrypted.</para>
    </callout>
    <callout arearefs="CO1-3">
      <para>In Corosync configurations using redundant networking (with more
        than one <option>interface</option>), you must select a Redundant
        Ring Protocol (RRP) mode other than <literal>none</literal>.
        <literal>active</literal> is the recommended RRP mode.</para>
    </callout>
    <callout arearefs="CO1-4">
      <para>There are several things to note about the recommended interface
        configuration:</para>
      <itemizedlist>
        <listitem>
          <para>The <option>ringnumber</option> must differ between all
            configured interfaces, starting with 0.</para>
        </listitem>
        <listitem>
          <para>The <option>bindnetaddr</option> is the network address of
            the interfaces to bind to. The example uses two network addresses
            of <literal>/24</literal> IPv4 subnets.</para>
        </listitem>
        <listitem>
          <para>Multicast groups (<option>mcastaddr</option>) must not be
            reused across cluster boundaries. In other words, no two distinct
            clusters should ever use the same multicast group. Be sure to
            select multicast addresses compliant with
            <link xlink:href="http://www.ietf.org/rfc/rfc2365.txt">RFC 2365,
            "Administratively Scoped IP Multicast"</link>.</para>
        </listitem>
        <listitem>
          <para>For firewall configurations, note that Corosync communicates
            over UDP only, and uses <literal>mcastport</literal> (for receives)
            and <literal>mcastport - 1</literal> (for sends).</para>
        </listitem>
      </itemizedlist>
    </callout>
    <callout arearefs="CO1-5">
      <para>The <literal>service</literal> declaration for the
        <literal>pacemaker</literal> service may be placed in the
        <filename>corosync.conf</filename> file directly, or in its own
        separate file,
        <filename>/etc/corosync/service.d/pacemaker</filename>.</para>
      <note>
        <para>If you are using Corosync version 2 on Ubuntu 14.04, remove
          or comment out lines under the service stanza, which enables
          Pacemaker to start up.</para>
      </note>
    </callout>
  </calloutlist>
  <para>Once created, the <filename>corosync.conf</filename> file (and the
    <filename>authkey</filename> file if the <option>secauth</option> option
    is enabled) must be synchronized across all cluster nodes.</para>
  </section>
  <section xml:id="_set_up_corosync_unicast">
  <title>Set up Corosync with unicast</title>
  <para>Some environments may not support multicast. For such cases,
    Corosync should be configured for unicast.
    An example fragment of the Corosync configuration file is shown below:</para>
  <formalpara>
    <title>Corosync configuration file fragment (<filename>corosync.conf</filename>)</title>
    <para>
      <programlisting language="ini">totem {
        #...
        interface {
                ringnumber: 0
                bindnetaddr: 192.168.42.0
                broadcast: yes <co xml:id="CO1-6"/>
                mcastport: 5405
        }
        interface {
                ringnumber: 1
                bindnetaddr: 10.0.42.0
                broadcast: yes
                mcastport: 5405
        }
        transport: udpu <co xml:id="CO1-7"/>
}

nodelist { <co xml:id="CO1-8"/>
        node {
                ring0_addr: 192.168.42.1
                ring1_addr: 10.0.42.1
                nodeid: 1
        }
        node {
                ring0_addr: 192.168.42.2
                ring1_addr: 10.0.42.2
                nodeid: 2
        }
}
#...</programlisting>
    </para>
  </formalpara>
  <calloutlist>
    <callout arearefs="CO1-6">
      <para>If the <option>broadcast</option> is set to yes, the broadcast address
        is used for communication. If this option is set, <option>mcastaddr</option>
        should not be set.</para>
    </callout>
    <callout arearefs="CO1-7">
      <para>The <option>transport</option> directive controls the transport mechanism used.
        To avoid the use of multicast entirely, a unicast transport parameter <option>udpu</option> should
        be specified. This requires specifying the list of members in <option>nodelist</option>
        directive; this could potentially make up the membership before deployment.
        The default is <option>udp</option>. The transport type can also be set to <option>udpu</option> or <option>iba</option>.</para>
    </callout>
    <callout arearefs="CO1-8">
       <para>Within the <option>nodelist</option> directive, it is possible to specify specific
         information about nodes in cluster. Directive can contain only the <option>node</option>
         sub-directive, which specifies every node that should be a member of the membership,
         and where non-default options are needed. Every node must have at least the <option>ring0_addr</option>
         field filled.</para>
      <note>
        <para>For UDPU, every node that should be a member of the membership must
         be specified.</para>
      </note>
      <para>Possible options are:</para>
      <para>The <option>ringX_addr</option> specifies IP address of one of the nodes.
        X is ring number.</para>
      <para>The <option>nodeid</option> configuration option is optional when using IPv4 and required
        when using IPv6. This is a 32-bit value specifying the node identifier delivered to the
        cluster membership  service. If this is not specified with IPv4, the node id will be
        determined from the 32-bit IP address the system to which the system is bound with ring
        identifier of 0. The node identifier value of zero is reserved and should not be used.</para>
    </callout>
  </calloutlist>
  </section>
  <section xml:id="_set_up_corosync_votequorum_full_size">
  <title>Set up Corosync with votequorum library</title>
  <para>Votequorum library is part of the corosync project. It provides
  interface to the vote-based quorum service and it needs to be explicitly
  enabled in the Corosync configuration file. The main role of votequorum
  library is to avoid split-brain situations, but it also provides a mechanism
  to:
  <itemizedlist>
    <listitem>
      <para>Query the quorum status</para>
    </listitem>
    <listitem>
      <para>Get a list of nodes known to the quorum service</para>
    </listitem>
    <listitem>
      <para>Receive notifications of quorum state changes</para>
    </listitem>
    <listitem>
      <para>Change the number of votes assigned to a node</para>
    </listitem>
    <listitem>
      <para>Change the number of expected votes for a cluster to be
        quorate</para>
    </listitem>
    <listitem>
      <para>Connect an additional quorum device to allow small clusters
        remain quorate during node outages</para>
    </listitem>
  </itemizedlist>
  Votequorum library has been created to replace and eliminate from advanced
  cluster configurations qdisk, disk-based quorum daemon for CMAN.
  </para>
  <formalpara>
    <title>Votequorum service configuration within Corosync</title>
    <para>
      <programlisting language="ini">quorum {
            provider: corosync_votequorum <co xml:id="CR0-1"/>
            expected_votes: 7 <co xml:id="CR0-2"/>
            wait_for_all: 1 <co xml:id="CR0-3"/>
            last_man_standing: 1 <co xml:id="CR0-4"/>
            last_man_standing_window: 10000 <co xml:id="CR0-5"/>
      }</programlisting>
    </para>
  </formalpara>
  <calloutlist>
   <callout arearefs="CR0-1"><para>Provider <option>corosync_votequorum</option>
        enables votequorum library, this is the only required option.</para>
   </callout>
   <callout arearefs="CR0-2"><para>The cluster is fully operational with
        <option>expected_votes</option> 7 nodes (each node has 1 vote),
        quorum: 4. If list of nodes is specified as <option>nodelist</option>
        the <option>expected_votes</option> is ignored.</para>
   </callout>
   <callout arearefs="CR0-3"><para><option>wait_for_all</option>
    When starting up a cluster (all nodes down) it will hold the cluster quorum
    until all of the nodes become online and joint the cluster first time
    (new in Corosync 2.0).</para>
   </callout>
   <callout arearefs="CR0-4"><para><option>last_man_standing</option> enable
    Last Man Standing (LMS) feature (disabled by default: 0). If a cluster is on
    the quorum edge (expected_votes: 7 online nodes: 4) for time longer than
    configured in <option>last_man_standing_window</option>, the cluster can
    recalculate quorum and continue operating even if the next node will be
    lost. This logic is repeated until the number of online nodes in the cluster
    reach 2. In order to allow cluster step down from 2 members to only 1,
    what is not recommended <option>auto_tie_breaker</option> option needs
    to be set.</para>
   </callout>
   <callout arearefs="CR0-5"><para><option>last_man_standing_window</option>
    is time required to recalculate quorum after one or most hosts have been
    lost from the cluster. To do the new quorum recalculation, the cluster needs
    to have quorum at least for <option>last_man_standing_window</option>,
    time in [ms] (default: 10000ms).</para>
   </callout>
  </calloutlist>
  </section>
</section>
